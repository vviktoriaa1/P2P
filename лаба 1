#include <iostream>
#include <string>
using namespace std;
struct Node{
    string name;
    int amount;
    double salary;
    Node *next;
};
//начало списка
void AddFirst (Node*& Head, string name, int amount, double salary){
    Node *NewNode=new Node;
    NewNode->name=name;
    NewNode->amount=amount;
    NewNode->salary=salary;
    NewNode->next=Head;
    Head=NewNode;
    return;
}
//конец списка
void AddLast(Node *&Head, string name, int amount, double salary){
    Node *tmp=Head;
    if (Head== NULL){ AddFirst(Head, name, amount, salary);
                      return; }
    while (tmp->next) tmp=tmp->next;
    Node *NewNode=new Node;
    NewNode->name=name;
    NewNode->amount=amount;
    NewNode->salary=salary;
    NewNode->next=NULL;
    tmp->next=NewNode;
    return;
}
//после заданного
int AddAfter(Node *Head, string name, int amount, double salary, string NameAfter){
    if (Head==NULL) return 1;
    Node *tmp=Head;
    while(tmp!=NULL && tmp->name != NameAfter){
        tmp=tmp->next;
    }
    if (tmp==NULL) return 1;
    Node *NewNode=new Node;
    NewNode->name=name;
    NewNode->amount=amount;
    NewNode->salary=salary;
    NewNode->next=tmp->next;
    tmp->next=NewNode;
    return 0;
}
//перед заданным
int AddBefore(Node *&Head, string name, int amount, double salary, string NameBefore){
    if (Head==NULL) return 1;
    if (Head->name==NameBefore){
        AddFirst(Head, name, amount, salary); return 0;
    }
    if (Head->next==NULL) return 1;
    Node *prev=Head, *tmp=Head->next;
    while(tmp->next!=NULL && tmp->name!=NameBefore){
        prev=prev->next; tmp=tmp->next;
    }
    if (tmp->next==NULL && tmp->name!=NameBefore) return 1;
    Node *NewNode=new Node;
    NewNode->name=name;
    NewNode->amount=amount;
    NewNode->salary=salary;
    NewNode->next=tmp;
    prev->next=NewNode;
    return 0;
}
//удаление
int DelNode(Node *&Head, string DelName){
    if (Head==NULL) return 1;
    Node *tmp=Head;
    if (Head->name==DelName){
        Head=Head->next; delete tmp; return 0;
    }
    if (Head->next ==NULL) return 1;
    Node *prev =Head; tmp=Head->next;
    while (tmp->next!=NULL && tmp->name!=DelName){
        prev=prev->next; tmp=tmp->next;
    }
    if (tmp->next==NULL && tmp->name!=DelName) return 1;
    prev->next=tmp->next;
    delete tmp;
    return 0;
}
//вывод
void PrintList(Node *Head){
    if (Head==NULL){
        cout<<"The list is empty"; return;
    }
    Node *tmp = Head;
    while (tmp!=NULL){
        cout<<"Product: "<<tmp->name<<"\nAmount: "<<tmp->amount<<"\nSalary: "<<tmp->salary<<"\n\n";
        tmp=tmp->next;
    }
    return;
}
//функция main 
int main(){
    Node *Head=NULL;
    AddLast(Head, "Alice", 30, 50000);
    AddLast(Head, "Bob", 25, 45000);
    AddFirst(Head, "Charlie", 35, 55000);
    cout<<"Initial List: "<<endl;
    PrintList(Head);
    AddAfter(Head, "David", 28, 48000, "Alice");
    cout<<"\nList after adding David after Alice: "<<endl;
    PrintList(Head);
    AddBefore(Head, "Eve", 22, 43000, "Bob");
    cout<<"\nList after adding Eve before Bob: "<<endl;
    PrintList(Head);
    DelNode(Head, "Alice");
    cout<<"\nList after deleting Alice: "<<endl;
    PrintList(Head);
    return 0;
}
